.include "m328pdef.inc"

.org 0x0000
    rjmp Inicio

;  UART 
.equ F_CPU = 16000000
.equ baud  = 9600
.equ bps   = (F_CPU/16/baud) - 1

;  MATRIZ 8x8 (pines) 
; Columnas: C1..C6 = PD2..PD7, C7=PB0, C8=PB1
; Filas:    F1..F4 = PB2..PB5, F5..F8 = PC0..PC3
.equ FILASB_OFF       = 0x3C   ; PB2..PB5 en '1' para apagar
.equ FILASC_OFF       = 0x0F   ; PC0..PC3 en '1' para apagar

;  Scroll (Caso 1)
.equ FRAMES_POR_PASO  = 10     ; a menor número, más rápido
.equ NUMFIG           = 14     ; cantidad de caracteres (incluye espacios)

C:         .db 0x7F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7F
O:         .db 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF
M1:        .db 0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81
E:         .db 0x7F, 0x01, 0x01, 0x01, 0x1F, 0x01, 0x01, 0x7F
ESPACIO:   .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
S:         .db 0x7F, 0x01, 0x01, 0x01, 0x7F, 0x40, 0x40, 0x7F
T:         .db 0x7F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08
A:         .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x81
S1:        .db 0x7F, 0x01, 0x01, 0x01, 0x7F, 0x40, 0x40, 0x7F
?1:        .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x01   ; Representación del "?"
?2:        .db 0x7E, 0x81, 0x81, 0xFF, 0x81, 0x81, 0x81, 0x01   ; Otra parte del signo "?"
ESPACIO1:  .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

; Tabla de punteros de los caracteres de "¿CÓMO ESTÁS?"
FIGTAB:
    .dw (C<<1),(O<<1),(M1<<1),(E<<1),(ESPACIO<<1),(S<<1),(T<<1),(A<<1),(S1<<1), \
        (?1<<1),(?2<<1),(ESPACIO1<<1)

; ============================================================================== 
;                                   INICIO
; ==============================================================================
Inicio:
    ; Stack
    ldi r16, HIGH(RAMEND)
    out SPH, r16
    ldi r16, LOW(RAMEND)
    out SPL, r16
    clr r1                   ; convención ABI de AVR

    ; UART 9600@16MHz
    ldi r16, LOW(bps)
    ldi r17, HIGH(bps)
    rcall initUART

    ; Inicializar matriz (GPIO + Timer0 para 1ms)
    rcall initMatriz

    ; Mensaje de bienvenida
    ldi ZH, high(msgInicio<<1)
    ldi ZL, low(msgInicio<<1)
    rcall puts


;                               LOOP PRINCIPAL

main_loop:
    rcall getc               ; espera un carácter en r16

    cpi  r16, '1'
    breq caso_1
    cpi  r16, '2'
    breq caso_2
    cpi  r16, '3'
    breq caso_3
    cpi  r16, '4'
    breq caso_4
    cpi  r16, '5'
    breq caso_5
    cpi  r16, '6'
    breq caso_6
    cpi  r16, '7'
    breq caso_7
    rjmp caso_default

; Casos 
caso_1:
    ; Texto por Serial
    ldi ZH, high(txtUno<<1)
    ldi ZL, low(txtUno<<1)
    rcall puts
    ; Scroll del mensaje "¿CÓMO ESTÁS?" (una pasada completa)
    rcall MostrarScrollMensaje
    rjmp fin_switch

caso_2:
    ldi ZH, high(txtDos<<1)
    ldi ZL, low(txtDos<<1)
    rcall puts
    ; Cara feliz para SIEMPRE (sale si llega una tecla)
    ldi  ZL, low(SONRISA<<1)
    ldi  ZH, high(SONRISA<<1)
    rjmp MOSTRAR_SIEMPRE     ; no vuelve

caso_3:
    ldi ZH, high(txtTres<<1)
    ldi ZL, low(txtTres<<1)
    rcall puts
    ; Cara triste para SIEMPRE
    ldi  ZL, low(TRISTE<<1)
    ldi  ZH, high(TRISTE<<1)
    rjmp MOSTRAR_SIEMPRE

caso_4:
    ldi ZH, high(txtCuatro<<1)
    ldi ZL, low(txtCuatro<<1)
    rcall puts
    ; Rombo para SIEMPRE
    ldi  ZL, low(ROMBO<<1)
    ldi  ZH, high(ROMBO<<1)
    rjmp MOSTRAR_SIEMPRE

caso_5:
    ldi ZH, high(txtCinco<<1)
    ldi ZL, low(txtCinco<<1)
    rcall puts
    ; Corazón para SIEMPRE
    ldi  ZL, low(CORAZON<<1)
    ldi  ZH, high(CORAZON<<1)
    rjmp MOSTRAR_SIEMPRE

caso_6:
    ldi ZH, high(txtSeis<<1)
    ldi ZL, low(txtSeis<<1)
    rcall puts
    ; Alien para SIEMPRE
    ldi  ZL, low(ALIEN<<1)
    ldi  ZH, high(ALIEN<<1)
    rjmp MOSTRAR_SIEMPRE

caso_7:
    ldi ZH, high(txtSiete<<1)
    ldi ZL, low(txtSiete<<1)
    rcall puts
    ; Secuencia infinita (sale si llega una tecla durante el muestreo)
    rjmp MostrarSecuenciaCincoFigForever

caso_default:
    ; Eco del carácter y nueva línea
    rcall putc         ; envía r16 tal cual
    ldi  r16, 13
    rcall putc
    ldi  r16, 10
    rcall putc

fin_switch:
    rjmp main_loop

 
;       RUTINAS UART

initUART:
    sts UBRR0L, r16
    sts UBRR0H, r17
    ldi r16, (1<<RXEN0)|(1<<TXEN0)
    sts UCSR0B, r16
    ldi r16, (1<<UCSZ01)|(1<<UCSZ00)     ; 8N1
    sts UCSR0C, r16
    ret

putc:
    lds r17, UCSR0A
    sbrs r17, UDRE0
    rjmp putc
    sts UDR0, r16
    ret

getc:
    lds r17, UCSR0A
    sbrs r17, RXC0
    rjmp getc
    lds r16, UDR0
    ret

puts:
    lpm r16, Z+
    cpi r16, 0
    breq fin_puts
    rcall putc
    rjmp puts
fin_puts:
    ret


;                           MENSAJES MONITOR SERIAL

.cseg
msgInicio:
    .db "Bienvenido! Ingrese el numero para la accion que quiere realizar", 13, 10, \
        "1 - Mostrar el Mensaje", 13, 10, \
        "2 - Mostrar Cara Feliz", 13, 10, \
        "3 - Mostrar Cara Triste", 13, 10, \
        "4 - Mostrar Rombo", 13, 10, \
        "5 - Mostrar Corazon", 13, 10, \
        "6 - Mostrar Alien de Space Invaders", 13, 10, \
        "7 - Mostrar las 5 figuras cada 1 segundo", 13, 10, 0, 0   

txtUno:    .db "Has elegido MENSAJE",      13, 10, 0          
txtDos:    .db "Has elegido CARA FELIZ",      13, 10, 0, 0        
txtTres:   .db "Has elegido CARA TRISTE",     13, 10, 0, 0, 0       
txtCuatro: .db "Has elegido ROMBO",   13, 10, 0, 0, 0       
txtCinco:  .db "Has elegido CORAZON",    13, 10, 0          
txtSeis:   .db "Has elegido ALIEN DE SPACE INVADERS",     13, 10, 0, 0, 0       
txtSiete:  .db "Has elegido VER LAS 5 FIGURAS",    13, 10, 0
