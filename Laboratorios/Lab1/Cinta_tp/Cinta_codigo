.include "m328pdef.inc"

.equ TIEMPO_DESC_MS   = 350      ; ms de descenso (ajustar a 1/2 vuelta)
.equ TIEMPO_ASC_MS    = 350      ; ms de ascenso  (ajustar a 1/2 vuelta)
.equ TIEMPO_PRESION_MS= 2000     ; ms M2 apagado (presionando)
.equ TIEMPO_PAUSA_MS  = 10000    ; ms M2 apagado (pausa larga tras ascenso)
.equ M2_INVERTIR      = 0        

.equ M2_A_BIT = 6                ; PD6
.equ M2_B_BIT = 1                ; PB1

.cseg
.org 0x0000
    rjmp RESET

RESET:
    ldi  r16, high(RAMEND)
    out  SPH, r16
    ldi  r16, low(RAMEND)
    out  SPL, r16
    clr  r1                      ; r1 = 0 (ABI)

    sbi  DDRD, M2_A_BIT         ; PD6 salida
    sbi  DDRB, M2_B_BIT         ; PB1 salida
    rcall M2_DETENER

    rcall T2_INICIAR_1MS

MAIN_LOOP:
    rcall M2_DESCENDER
    ldi  r24, low(TIEMPO_DESC_MS)
    ldi  r25, high(TIEMPO_DESC_MS)
    rcall T2_REINICIAR_1MS
    rcall RETARDO_MS
    rcall M2_DETENER

    ldi  r24, low(TIEMPO_PRESION_MS)
    ldi  r25, high(TIEMPO_PRESION_MS)
    rcall T2_REINICIAR_1MS
    rcall RETARDO_MS

    rcall M2_ASCENDER
    ldi  r24, low(TIEMPO_ASC_MS)
    ldi  r25, high(TIEMPO_ASC_MS)
    rcall T2_REINICIAR_1MS
    rcall RETARDO_MS
    rcall M2_DETENER

    ldi  r24, low(TIEMPO_PAUSA_MS)
    ldi  r25, high(TIEMPO_PAUSA_MS)
    rcall T2_REINICIAR_1MS
    rcall RETARDO_MS

    rjmp MAIN_LOOP


T2_INICIAR_1MS:
    ldi  r16, (1<<WGM21)      
    sts  TCCR2A, r16
    ldi  r16, (1<<CS22)       ; prescaler = 64
    sts  TCCR2B, r16
    ldi  r16, 249             ; 1 ms 
    sts  OCR2A, r16
    ldi  r16, 0               ; reset contador
    sts  TCNT2, r16
    ldi  r16, (1<<OCF2A)      ; limpia flag comparaciÃ³n
    out  TIFR2, r16
    ret

T2_REINICIAR_1MS:
    ldi  r16, 0
    sts  TCNT2, r16
    ldi  r16, (1<<OCF2A)
    out  TIFR2, r16
    ret

RETARDO_MS:
    cp   r24, r1
    cpc  r25, r1
    breq RETARDO_MS_LISTO
RETARDO_MS_BUCLE:
    ldi  r18, (1<<OCF2A)
    out  TIFR2, r18
ESPERA_1MS:
    in   r19, TIFR2
    sbrs r19, OCF2A           ; espera 1 ms
    rjmp ESPERA_1MS
    sbiw r24, 1
    brne RETARDO_MS_BUCLE
RETARDO_MS_LISTO:
    ret

M2_DETENER:
    cbi  PORTD, M2_A_BIT
    cbi  PORTB, M2_B_BIT
    ret

.if M2_INVERTIR == 0
M2_DESCENDER:                       ; bajar
    sbi  PORTD, M2_A_BIT            ; A=1
    cbi  PORTB, M2_B_BIT            ; B=0
    ret
M2_ASCENDER:                        ; subir
    cbi  PORTD, M2_A_BIT            ; A=0
    sbi  PORTB, M2_B_BIT            ; B=1
    ret
.else
M2_DESCENDER:                       ; bajar (invertido)
    cbi  PORTD, M2_A_BIT
    sbi  PORTB, M2_B_BIT
    ret
M2_ASCENDER:                        ; subir (invertido)
    sbi  PORTD, M2_A_BIT
    cbi  PORTB, M2_B_BIT
    ret
.endif
